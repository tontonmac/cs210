random1.txt result:

For file random1.txt of size 26, the number of Selection Sort comparisons is: 25
For file random1.txt of size 26, the number of Insertion Sort comparisons is: 171
For file random1.txt of size 26, the number of Bubble Sort comparisons is: 171
For file random1.txt of size 26, the number of Quick Sort comparisons is: 66
For file random1.txt of size 26, the number of Merge Sort comparisons is: 124
Max Memory Use = 124

random2.txt result:

For file random2.txt of size 52, the number of Selection Sort comparisons is: 51
For file random2.txt of size 52, the number of Insertion Sort comparisons is: 587
For file random2.txt of size 52, the number of Bubble Sort comparisons is: 587
For file random2.txt of size 52, the number of Quick Sort comparisons is: 142
For file random2.txt of size 52, the number of Merge Sort comparisons is: 300
Max Memory Use = 300

reverse.txt result:

For file reverse.txt of size 26, the number of Selection Sort comparisons is: 25
For file reverse.txt of size 26, the number of Insertion Sort comparisons is: 325
For file reverse.txt of size 26, the number of Bubble Sort comparisons is: 325
For file reverse.txt of size 26, the number of Quick Sort comparisons is: 50
For file reverse.txt of size 26, the number of Merge Sort comparisons is: 124
Max Memory Use = 124

sorted.txt result:

For file sorted.txt of size 26, the number of Selection Sort comparisons is: 25
For file sorted.txt of size 26, the number of Insertion Sort comparisons is: 0
For file sorted.txt of size 26, the number of Bubble Sort comparisons is: 0
For file sorted.txt of size 26, the number of Quick Sort comparisons is: 50
For file sorted.txt of size 26, the number of Merge Sort comparisons is: 124
Max Memory Use = 124

mystery.txt result:

For file mystery.txt of size 26, the number of Selection Sort comparisons is: 25
For file mystery.txt of size 26, the number of Insertion Sort comparisons is: 118
For file mystery.txt of size 26, the number of Bubble Sort comparisons is: 118
For file mystery.txt of size 26, the number of Quick Sort comparisons is: 58
For file mystery.txt of size 26, the number of Merge Sort comparisons is: 124
Max Memory Use = 124

*Results after change in the bubble Sort:

random1.txt result:

For file random1.txt of size 26, the number of Bubble Sort comparisons is: 73
Max Memory Use = 73

random2.txt result:

For file random2.txt of size 52, the number of Bubble Sort comparisons is: 128
Max Memory Use = 128

reverse.txt result:

For file reverse.txt of size 26, the number of Bubble Sort comparisons is: 325
Max Memory Use = 325

sorted.txt result:

For file sorted.txt of size 26, the number of Bubble Sort comparisons is: 0
Max Memory Use = 0

mystery.txt result:

For file mystery.txt of size 26, the number of Bubble Sort comparisons is: 23
Max Memory Use = 23


after the change, the number of comparison was reduced. The code eliminate any
unecessary comparison as the already sorted data are directly found.
Also, the code allocate the memory after the recursive call. 

*Result after change in the quick sort:

random1.txt:

For file random1.txt of size 26, the number of Quick Sort comparisons is: 54
Max Memory Use = 0

random2.txt:

For file random2.txt of size 52, the number of Quick Sort comparisons is: 126
Max Memory Use = 0

reverse.txt:

For file reverse.txt of size 26, the number of Quick Sort comparisons is: 44
Max Memory Use = 0

sorted.txt:

For file sorted.txt of size 26, the number of Quick Sort comparisons is: 30
Max Memory Use = 0

mystery.txt:

For file mystery.txt of size 26, the number of Quick Sort comparisons is: 36
Max Memory Use = 0

After the change, the number of comparison was reduced. the search is been divded
in two. instead of the code searching in the entire data and comparing all the 
data from the begining to the end of the file, it just seach on the one half of 
the data provided.

After the change in both sorts, the efficiency of the algorythm increased and
less memory was used.

insertion sort N^2 
selection sort N^2 
mergesort NlgN 
quicksort NlgN  






